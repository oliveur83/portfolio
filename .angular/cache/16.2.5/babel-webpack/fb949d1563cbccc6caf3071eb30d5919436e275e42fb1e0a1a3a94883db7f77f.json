{"ast":null,"code":"import * as THREE from 'three';\nexport class logo {\n  constructor(container) {\n    this.container = container;\n  }\n  init() {\n    // Création de la scène\n    const scene = new THREE.Scene();\n    // Création de la caméra\n    const camera = new THREE.PerspectiveCamera(75, this.container.clientWidth / this.container.clientHeight, 0.1, 1000);\n    camera.position.z = 15;\n    // Création du rendu\n    const renderer = new THREE.WebGLRenderer();\n    renderer.setSize(this.container.clientWidth, this.container.clientHeight);\n    this.container.appendChild(renderer.domElement);\n    renderer.setClearColor(0xc4e4f4, 1);\n    //------------------------------------------\n    //-------------------------------------\n    function createCircleWithHole(radius, holeRadius, segments) {\n      const shape = new THREE.Shape();\n      const center = new THREE.Vector2(0, 0);\n      const startAngle = 0;\n      const endAngle = Math.PI * 2;\n      // Ajouter le cercle extérieur\n      shape.absarc(center.x, center.y, radius, startAngle, endAngle, false);\n      // Ajouter le trou central\n      const holePath = new THREE.Path();\n      holePath.absarc(center.x, center.y, holeRadius, startAngle, endAngle, true);\n      shape.holes.push(holePath);\n      return shape;\n    }\n    function createC(radius, thickness, startAngle, endAngle) {\n      const shape = new THREE.Shape();\n      const innerRadius = radius - thickness;\n      shape.moveTo(radius * Math.cos(startAngle), radius * Math.sin(startAngle));\n      shape.absarc(0, 0, innerRadius, startAngle, endAngle, true);\n      shape.absarc(0, 0, radius, endAngle, startAngle, false);\n      return shape;\n    }\n    function createRectangleWithHole(width, height, holeWidth, holeHeight) {\n      const shape = new THREE.Shape();\n      const halfWidth = width / 2;\n      const halfHeight = height / 2;\n      // Définir les coins du rectangle\n      const topLeft = new THREE.Vector2(-halfWidth, halfHeight);\n      const topRight = new THREE.Vector2(halfWidth, halfHeight);\n      const bottomRight = new THREE.Vector2(halfWidth, -halfHeight);\n      const bottomLeft = new THREE.Vector2(-halfWidth, -halfHeight);\n      // Définir les points du trou central\n      const holeTopLeft = new THREE.Vector2(-holeWidth / 2, holeHeight / 2);\n      const holeTopRight = new THREE.Vector2(holeWidth / 2, holeHeight / 2);\n      const holeBottomRight = new THREE.Vector2(holeWidth / 2, -holeHeight / 2);\n      const holeBottomLeft = new THREE.Vector2(-holeWidth / 2, -holeHeight / 2);\n      // Créer le rectangle\n      shape.moveTo(topLeft.x, topLeft.y);\n      shape.lineTo(topRight.x, topRight.y);\n      shape.lineTo(bottomRight.x, bottomRight.y);\n      shape.lineTo(bottomLeft.x, bottomLeft.y);\n      shape.lineTo(topLeft.x, topLeft.y);\n      // Créer le trou central\n      const holePath = new THREE.Path();\n      holePath.moveTo(holeTopLeft.x, holeTopLeft.y);\n      holePath.lineTo(holeTopRight.x, holeTopRight.y);\n      holePath.lineTo(holeBottomRight.x, holeBottomRight.y);\n      holePath.lineTo(holeBottomLeft.x, holeBottomLeft.y);\n      holePath.lineTo(holeTopLeft.x, holeTopLeft.y);\n      shape.holes.push(holePath);\n      return shape;\n    }\n    //---------------------------------------------\n    //-----------------------------------------------   \n    // Création du cercle avec une partie enlevée\n    const radiuso = 1;\n    const holeRadius = 0.5;\n    const segments = 100;\n    const radius = 1;\n    const circleShape = createCircleWithHole(radius, holeRadius, segments);\n    const geometryo = new THREE.ShapeGeometry(circleShape);\n    const materialo = new THREE.MeshBasicMaterial({\n      color: 0x084a83,\n      side: THREE.DoubleSide\n    });\n    const mesho = new THREE.Mesh(geometryo, materialo);\n    const mesho2 = new THREE.Mesh(geometryo, materialo);\n    mesho.position.x = +7;\n    mesho.position.y = -0.3;\n    mesho2.position.x = -1.3;\n    mesho2.position.y = -0.4;\n    //-------------------------------------------\n    //création d'un L\n    const L1 = createRectangleWithHole(0.5, 2, 0, 0);\n    const L2 = createRectangleWithHole(1.5, 0.5, 0, 0);\n    const geometryrec = new THREE.ShapeGeometry(L1);\n    const geometryL2 = new THREE.ShapeGeometry(L2);\n    const materialrec = new THREE.MeshBasicMaterial({\n      color: 0x084a83,\n      side: THREE.DoubleSide\n    });\n    const meshL1 = new THREE.Mesh(geometryrec, materialrec);\n    const meshL2 = new THREE.Mesh(geometryL2, materialrec);\n    meshL1.position.x = 5;\n    meshL2.position.x = 4.5;\n    meshL2.position.y = -1;\n    //----------------------------------------------\n    //création du I\n    const i1 = createRectangleWithHole(0.5, 2, 0, 0);\n    const geometryi = new THREE.ShapeGeometry(i1);\n    const meshi1 = new THREE.Mesh(geometryrec, materialrec);\n    meshi1.position.x = 3;\n    meshi1.position.y = -0.2;\n    //-----------------------------------------\n    // Création du \"C\"\n    const thickness = 0.4;\n    const startAngle = Math.PI * 0.5;\n    const endAngle = Math.PI * 1.5;\n    const radiusc = 1.2;\n    const cShape = createC(radiusc, thickness, startAngle, endAngle);\n    const extrudeSettings = {\n      depth: 0.2,\n      bevelEnabled: false\n    };\n    const geometryc = new THREE.ExtrudeGeometry(cShape, extrudeSettings);\n    const materialc = new THREE.MeshBasicMaterial({\n      color: 0x084a83\n    });\n    const mesh = new THREE.Mesh(geometryc, materialc);\n    mesh.position.x = 0.5;\n    mesh.position.y = -0.2;\n    scene.add(mesh);\n    // Création du rectangle avec une partie enlevée\n    const width = 20;\n    const height = 10;\n    const holeWidth = 19;\n    const holeHeight = 6.5;\n    const rectangleShape = createRectangleWithHole(width, height, holeWidth, holeHeight);\n    const geometryrect = new THREE.ShapeGeometry(rectangleShape);\n    const meshrec = new THREE.Mesh(geometryrect, materialrec);\n    // création dun D\n    const cdr = createRectangleWithHole(0.5, 2.4, 0, 0);\n    const geometryd = new THREE.ShapeGeometry(cdr);\n    const meshd = new THREE.Mesh(geometryd, materialrec);\n    meshd.position.x = -3;\n    meshd.position.y = -0.2;\n    const startAnglecd = Math.PI * 1.5;\n    const endAnglecd = Math.PI * 0.5;\n    const cd = createC(radiusc, thickness, startAnglecd, endAnglecd);\n    const geometrycd = new THREE.ExtrudeGeometry(cd, extrudeSettings);\n    const meshcd = new THREE.Mesh(geometrycd, materialc);\n    meshcd.position.x = -3;\n    meshcd.position.y = -0.2;\n    scene.add(meshcd);\n    scene.add(meshd);\n    // création dun E\n    const geometryE1 = new THREE.ShapeGeometry(L2);\n    const geometryE2 = new THREE.ShapeGeometry(L2);\n    const geometryE3 = new THREE.ShapeGeometry(L2);\n    const geometryE = new THREE.ShapeGeometry(L1);\n    const meshE1 = new THREE.Mesh(geometryE1, materialrec);\n    const meshE2 = new THREE.Mesh(geometryE2, materialrec);\n    const meshE3 = new THREE.Mesh(geometryE3, materialrec);\n    const meshE = new THREE.Mesh(geometryE, materialrec);\n    meshE.position.x = -5.5;\n    meshE.position.y = -0.3;\n    meshE1.position.x = -6;\n    meshE2.position.x = -6;\n    meshE2.position.y = -1.1;\n    meshE3.position.y = +0.9;\n    meshE3.position.x = -6;\n    scene.add(meshE1);\n    scene.add(meshE2);\n    scene.add(meshE3);\n    scene.add(mesh);\n    scene.add(meshE);\n    //-------------------------------------\n    scene.add(mesho);\n    scene.add(mesho2);\n    scene.add(meshi1);\n    scene.add(meshL1);\n    scene.add(meshL2);\n    scene.add(meshrec);\n    // Animation\n    function animate() {\n      requestAnimationFrame(animate);\n      scene.rotation.y += 0.01;\n      renderer.render(scene, camera);\n    }\n    animate();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}